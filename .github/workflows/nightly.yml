name: Nightly Build of Aurora Editor
on:
  push:
     branches: [ development ]

jobs:
  build_nightly_editor:
    if: github.repository_owner == 'AuroraEditor'
    runs-on: macos-12
    timeout-minutes: 30 # If a build exceeds 430 mins, it probably isn't ever going to complete
    steps:
      - name: 'Cleanup build folder'
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./
        
      - uses: actions/checkout@v3
      
      - name: "Select Xcode 14.0"
        run: sudo xcode-select -s /Applications/Xcode_14.0.app
        
        ### Certs
      - name: "Import Certificate: Development"
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.DEVELOPMENT_CERTIFICATE_DATA }}
          P12_PASSWORD: ${{ secrets.DEVELOPMENT_CERTIFICATE_PASSPHRASE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      
      - name: "Import Certificate: Distribution"
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.DISTRIBUTION_CERTIFICATE_DATA }}
          P12_PASSWORD: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSPHRASE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: "Import Certificate: Developer ID Application"
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.DEVELOPER_ID_DATA }}
          P12_PASSWORD: ${{ secrets.DEVELOPER_ID_PASSPHRASE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: "Update version number"
        run: agvtool new-version -all `date -u "+%Y%m%d.%H%M"`

      - name: "Create Release Build Archive"
        run: | 
          set -o pipefail && xcodebuild -workspace "Aurora Editor.xcworkspace" -scheme "Aurora Editor (Release)" -configuration Release archive -archivePath "builds/Aurora Editor.xcarchive" DEVELOPMENT_TEAM=4V2D72S45C OTHER_CODE_SIGN_FLAGS="--options=runtime" | xcpretty 

      - name: "Export Release Build"
        run: |
          xcrun xcodebuild -exportArchive -exportOptionsPlist .github/export.plist -archivePath "builds/Aurora Editor.xcarchive" -exportPath builds

      - name: "Sign application"
        run: |
          codesign --sign "Developer ID Application: Wesley de Groot (4V2D72S45C)" -vvv --verbose --strict --options=runtime --prefix com.auroraeditor. --force --deep --timestamp "builds/Aurora Editor.app"

      - name: Install create-dmg
        run: npm install --global create-dmg
        
      - name: Make Release Dmg
        run: create-dmg "builds/Aurora Editor.app"

      - name: "notarytool submit"
        run: |
          xcrun notarytool submit "Aurora Editor 1.0.dmg" --apple-id "${{ secrets.APPLEID_EMAIL }}" --password "${{ secrets.APPLEID_PASSWORD }}" --team-id "4V2D72S45C" --wait > notarytool.log
          cat notarytool.log
          xcrun notarytool log "$(cat notarytool.log | grep -m1 id: | cut -d':' -f 2 | sed  s/\ //g)" --apple-id "${{ secrets.APPLEID_EMAIL }}" --password "${{ secrets.APPLEID_PASSWORD }}" --team-id "4V2D72S45C"
        
      # - name: "Staple Release Build"
      # run: xcrun stapler staple "Aurora Editor 1.0.dmg"
        
      - name: Upload a Build Artifact
        id: upload_artifact
        uses: actions/upload-artifact@v3.0.0
        with:
          # Artifact name
          name: AuroraEditor_Nightly # optional, default is artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: "Aurora Editor 1.0.dmg"

      - name: Calculate File Size
        id: calculate_size
        run: |
          # Specify the path to the file you want to calculate the size of
          file_path="Aurora Editor 1.0.dmg"
    
          # Calculate the file size in bytes
          file_size_bytes=$(ls -l "$file_path" | awk '{print $5}')

          echo "Size: $file_size_bytes"
          echo "file_size_bytes=$file_size_bytes" >> $GITHUB_OUTPUT
        
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db

      - name: Extract Version Info and Calculate SHA-256
        id: version_and_sha
        run: |
          # Get the version name (CFBundleShortVersionString)
          version_name=$(agvtool what-marketing-version -terse1)
          # Get the version code (CFBundleVersion)
          version_code=$(agvtool what-version -terse)
          sha256sum=$(shasum -a 256 "Aurora Editor 1.0.dmg" | awk '{ print $1 }')

          echo "version_name=$version_name" >> $GITHUB_OUTPUT
          echo "version_code=$version_code" >> $GITHUB_OUTPUT
          echo "sha256sum=$sha256sum" >> $GITHUB_OUTPUT

      - name: Create a Updated nightly.json File
        run: |
          version_name=${{ steps.version_and_sha.outputs.version_name }}
          version_code=${{ steps.version_and_sha.outputs.version_code }}
          sha256sum=${{ steps.version_and_sha.outputs.sha256sum }}
          file_size_bytes=${{ steps.calculate_size.outputs.file_size_bytes }}
          
          echo "{\"versionCode\": \"$version_code\", \"versionName\": \"$version_name\", \"sha256sum\": \"$sha256sum\", \"url\": \"https://nightly.link/AuroraEditor/AuroraEditor/workflows/nightly/development/AuroraEditor_Nightly.zip\", \"size\": \"$file_size_bytes\"}" > app_info.json

      - name: Get SHA of nightly.json file
        id: get_sha
        env:
          PAT: ${{ secrets.BOT_TOKEN }}
        run: |
          result=$(curl -s -H "Authorization: Bearer $PAT" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/AuroraEditor/auroraeditor.com/contents/public/updates/dynamic/macos/nightly.json 2>&1)
    
          # Check for errors and log stderr
          if [ $? -ne 0 ]; then
            echo "Error occurred during curl request:"
            echo "$result"
            exit 1
          fi
    
          # Extract SHA from the JSON response
          SHA=$(echo "$result" | jq -r '.sha')

          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Commit Updated nightly.json to auroraeditor.com Repository
        env:
          PAT: ${{ secrets.BOT_TOKEN }}
        run: |
          sha=${{ steps.get_sha.outputs.sha }}
          json_content=$(cat app_info.json)
          commit_message="Updated nightly.json"
    
          # Define the API URL
          api_url="https://api.github.com/repos/AuroraEditor/auroraeditor.com/contents/public/updates/dynamic/macos/nightly.json"

          # Use curl to create the commit with the updated JSON file
          curl -H "Authorization: Bearer $PAT" -X PUT \
            -d "{\"message\": \"$commit_message\", \"content\": \"$(base64 <<< $json_content)\", \"branch\": \"main\", \"sha\": \"$sha\"}" \
            "$api_url"
