name: Nightly Build of Aurora Editor
on:
  push:
     branches: [ development ]

jobs:
  build_nightly_editor:
    if: github.repository_owner == 'AuroraEditor'
    runs-on: macos-12
    timeout-minutes: 30
    steps:
      - name: 'Cleanup build folder'
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./
        
      - uses: actions/checkout@v3
      
      - name: "Select Xcode 14.0"
        run: sudo xcode-select -s /Applications/Xcode_14.0.app
        
        ### Certs
      - name: "Import Certificate: Development"
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.DEVELOPMENT_CERTIFICATE_DATA }}
          P12_PASSWORD: ${{ secrets.DEVELOPMENT_CERTIFICATE_PASSPHRASE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      
      - name: "Import Certificate: Distribution"
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.DISTRIBUTION_CERTIFICATE_DATA }}
          P12_PASSWORD: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSPHRASE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: "Import Certificate: Developer ID Application"
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.DEVELOPER_ID_DATA }}
          P12_PASSWORD: ${{ secrets.DEVELOPER_ID_PASSPHRASE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: "Update version number"
        run: |
          # Calculate the new version number based on SemVer
          current_version=$(agvtool what-marketing-version -terse1)
          IFS='.' read -r -a version_parts <<< "$current_version"
    
          # Increment the version components based on commit messages
          new_major=${version_parts[0]}
          new_minor=${version_parts[1]}
          new_patch=${version_parts[2]}

          echo "New version: $new_major.$new_minor.$new_patch"
    
          # Get the list of commit messages since the last version
          commit_messages=$(git log --oneline $(git describe --tags --abbrev=0)..HEAD --format="%s")

          version_name="V1.0.0"
    
          # Check commit messages for keywords
          if echo "$commit_messages" | grep -q "breaking"; then
            ((new_major++))
            new_minor=0
            new_patch=0
            version_name="V$new_major"
          elif echo "$commit_messages" | grep -q "feature"; then
            ((new_minor++))
            new_patch=0
            version_name="V$new_major.$new_minor"
          else
            ((new_patch++))
            version_name="V$new_major.$new_minor.$new_patch"
          fi
    
          # Generate the new version number
          new_version="$new_major.$new_minor.$new_patch"

          if [[ $new_version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            agvtool new-marketing-version "$new_version"
            echo "New version: $new_version"
            echo "Version name: $version_name"
           else
            agvtool new-marketing-version "$current_version"
            echo "Invalid new version, falling back to the old version: $current_version"
            echo "Version name: $version_name"
          fi
